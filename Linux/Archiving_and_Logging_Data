## Week 5 Homework Submission File: Archiving and Logging Data

Please edit this file by adding the solution commands on the line below the prompt.

Save and submit the completed file for your homework submission.

---
Name: Kathleen Avvento
### Step 1: Create, Extract, Compress, and Manage tar Backup Archives

1. Command to **extract** the `TarDocs.tar` archive to the current directory: tar -xf TarDocs.tar

2. Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory: tar -cvf Javaless_Docs.tar ~/Projects/TarDocs/Documents/Google-Maps_Hacks/ ~/Projects/TarDocs/Documents/Design-Patterns/ ~/Projects/TarDocs/Documents/IntellJIDEA_ReferenceCard.pdf ~/Projects/TarDocs/Documents/Music-Sheets/

3. Command to ensure `Java/` is not in the new `Javaless_Docs.tar` archive: tar tvvf Javaless_Docs.tar | grep Java 

**Bonus** 
- Command to create an incremental archive called `logs_backup_tar.gz` with only changed files to `snapshot.file` for the `/var/log` directory: /var/log tar -czvg snapshot.file -f logs_backup.tar.gz backup

#### Critical Analysis Question

- Why wouldn't you use the options `-x` and `-c` at the same with `tar`?
Since -x extracts an archive and -c creates an archive, they cannot be used together because you have to create an archive before extracting it and vice versa.  
---

### Step 2: Create, Manage, and Automate Cron Jobs

1. Cron job for backing up the `/var/log/auth.log` file:  0 6 * * 3 tar cvvf auth_backup.tgz /var/log/auth.log

---

### Step 3: Write Basic Bash Scripts

1. Brace expansion command to create the four subdirectories: mkdir ~/backups/{freemem,diskuse,openlist,freedisk}

2. Paste your `system.sh` script edits below:

    ```bash
    #!/bin/bash
    #print the amount of free memory to free_mem.txt
    free -mh >> ~/backups/freemem/free_mem.txt

    #print disk usage and saves to disk_usage.txt
    du -h >> ~/backups/diskuse/disk_usage.txt

    #print all open files and saves to open_list.txt
    lsof >> ~/backups/openlist/open_list.txt

    #print all fille system disk space stats and saves to free_disks.txt
    df -h >> ~/backups/freedisk/free_disk.txt
    
3. Command to make the `system.sh` script executable: chmod +x system.sh

**Optional**
- Commands to test the script and confirm its execution: sudo ./system.sh

**Bonus**
- Command to copy `system` to system-wide cron directory: crontab -e
command: sudo ./system.sh

---

### Step 4. Manage Log File Sizes
 
1. Run `sudo nano /etc/logrotate.conf` to edit the `logrotate` configuration file. 

    Configure a log rotation scheme that backs up authentication messages to the `/var/log/auth.log`.

    - Add your config file edits below:

    ```bash
    /var/log/auth.log {
        weekly
        rotate 7
        notifempty
        delaycompress
        missingok
        endscript 
    }
    ```
---

### Bonus: Check for Policy and File Violations

1. Command to verify `auditd` is active: systelctl status auditd

2. Command to set number of retained logs and maximum log file size:

    - Add the edits made to the configuration file below:

    ```bash
    max_log_file + 35
    num_logs = 7
    ```

3. Command using `auditd` to set rules for `/etc/shadow`, `/etc/passwd` and `/var/log/auth.log`:


    - Add the edits made to the `rules` file below:

    ```bash
    -w /etc/shadow -p wra -k hashpass_audit 
    -w /etc/passwd -p  wra -k userpass_audit
    -w /var/log/auth.log -p wra -k authlog_audit
    ```

4. Command to restart `auditd`: systemctl restart auditd

5. Command to list all `auditd` rules: sudo auditctl -l

6. Command to produce an audit report: sudo aureport -m 

7. Create a user with `sudo useradd attacker` and produce an audit report that lists account modifications: sudo aureport -m 

8. Command to use `auditd` to watch `/var/log/cron`: sudo nano /etc/audit/rules.d/audit.rules && -w /var/log/cron -p wra -k cron_rule 

9. Command to verify `auditd` rules: sudo auditctl -l

---

### Bonus (Research Activity): Perform Various Log Filtering Techniques

1. Command to return `journalctl` messages with priorities from emergency to error: journalctl -p 3 -xb

1. Command to check the disk usage of the system journal unit since the most recent boot: journalctl --disk-usage

1. Comand to remove all archived journal files except the most recent two: sudo journalctl sysemd-journald


1. Command to filter all log messages with priority levels between zero and two, and save output to `/home/sysadmin/Priority_High.txt`: sudo journalctl -b -l -p "0".."2" >> /home/sysadmin/Priority_High.txt

1. Command to automate the last command in a daily cronjob. Add the edits made to the crontab file below:

    ```bash
    0 4 * * * < command>
    ```

---
Â© 2020 Trilogy Education Services, a 2U, Inc. brand. All Rights Reserved.
